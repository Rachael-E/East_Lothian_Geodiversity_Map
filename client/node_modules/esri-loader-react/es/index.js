function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { loadModules } from 'esri-loader';

var EsriLoaderReact = function (_PureComponent) {
  _inherits(EsriLoaderReact, _PureComponent);

  function EsriLoaderReact() {
    _classCallCheck(this, EsriLoaderReact);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  EsriLoaderReact.prototype.componentDidCatch = function componentDidCatch(error, info) {
    var onError = this.props.onError;


    if (onError) {
      onError(error, info);
    }
  };

  EsriLoaderReact.prototype.componentDidMount = function componentDidMount() {
    var _this2 = this;

    var _props = this.props,
        modulesToLoad = _props.modulesToLoad,
        options = _props.options,
        onReady = _props.onReady,
        onError = _props.onError;


    loadModules(modulesToLoad ? modulesToLoad : [], options).then(function (loadedModules) {

      if (onReady) {
        onReady({ loadedModules: loadedModules, containerNode: _this2.mapContainer });
      }
    }).catch(function (error) {

      if (onError) {
        onError(error, null);
      }
    });
  };

  EsriLoaderReact.prototype.render = function render() {
    var _this3 = this;

    var _props2 = this.props,
        renderMapContainer = _props2.renderMapContainer,
        mapContainerClassName = _props2.mapContainerClassName,
        children = _props2.children;


    if (!renderMapContainer) {
      return children ? children : null;
    }

    return React.createElement(
      'div',
      { ref: function ref(node) {
          return _this3.mapContainer = node;
        }, className: mapContainerClassName },
      children ? children : null
    );
  };

  return EsriLoaderReact;
}(PureComponent);

EsriLoaderReact.propTypes = process.env.NODE_ENV !== "production" ? {
  renderMapContainer: PropTypes.bool, // default is true
  mapContainerClassName: PropTypes.string, // default is 'map-view'
  modulesToLoad: PropTypes.arrayOf(PropTypes.string),
  options: PropTypes.shape({
    url: PropTypes.string,
    dojoConfig: PropTypes.object
  }),
  onError: PropTypes.func, // (error, info) =>
  onReady: PropTypes.func // ({loadedModules, containerNode (null if renderMapContainer !== true)})
} : {};

EsriLoaderReact.defaultProps = {
  renderMapContainer: true,
  mapContainerClassName: 'map-view',
  onError: function onError(error, info) {
    return console.error(error);
  }
};

export default EsriLoaderReact;